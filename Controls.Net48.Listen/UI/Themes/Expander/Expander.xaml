<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:UI.Controls.Expander"
                    xmlns:btn="clr-namespace:UI.Controls.Button"
                    xmlns:base="clr-namespace:UI.Controls.Base">


    <Style TargetType="{x:Type local:Expander}">
        <Setter Property="Background" Value="{DynamicResource ExpanderBgBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource SettingPanelBorderBrush}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="CornerRadius" Value="6"/>
        <Setter Property="Padding" Value="15"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:Expander}">
                    <Border ClipToBounds="True" Background="Transparent">
                        <Grid Background="Transparent">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition x:Name="ContentRow"
                           Height="{Binding Height,ElementName=ContentHeight}" />
                            </Grid.RowDefinitions>
                            <VisualStateManager.VisualStateGroups>
                                <VisualStateGroup x:Name="CommonStates">
                                    <VisualState x:Name="Normal" />
                                    <VisualState x:Name="MouseOver" />
                                    <!--<VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border"
                                                Storyboard.TargetProperty="(Panel.Background).
                      (GradientBrush.GradientStops)[1].(GradientStop.Color)">
                                            <EasingColorKeyFrame KeyTime="0"
                                         Value="{StaticResource DisabledControlDarkColor}" />
                                        </ColorAnimationUsingKeyFrames>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border"
                                                Storyboard.TargetProperty="(Border.BorderBrush).
                      (GradientBrush.GradientStops)[1].(GradientStop.Color)">
                                            <EasingColorKeyFrame KeyTime="0"
                                         Value="{StaticResource DisabledBorderLightColor}" />
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>-->
                                </VisualStateGroup>
                            </VisualStateManager.VisualStateGroups>
                            <Canvas x:Name="ContentHeight" Visibility="Collapsed"  Height="0"/>

                            <Border x:Name="HeaderBorder"
                  Grid.Row="0"
                  Padding="{TemplateBinding Padding}"
                                    Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding CornerRadius}" Panel.ZIndex="2">

                                <Grid>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="*" />
                                        <ColumnDefinition Width="40" />

                                    </Grid.ColumnDefinitions>

                                    <ContentPresenter
                                Margin="4"
                                ContentSource="Header"
                                RecognizesAccessKey="True" TextElement.FontSize="14" VerticalAlignment="Center"/>
                                    <btn:IconButton x:Name="ExpBtn" Grid.Column="1" Command="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:Expander}}, Path=ExpanderCommand}">
                                        <base:Icon x:Name="Icon" IconType="ChevronDownMed" FontSize="12" RenderTransformOrigin=".5,.5">
                                            <base:Icon.RenderTransform>
                                                <RotateTransform Angle="0"/>
                                            </base:Icon.RenderTransform>
                                        </base:Icon>
                                    </btn:IconButton>
                                </Grid>
                            </Border>
                            <Border x:Name="Content"
                  Grid.Row="1"
                                    BorderThickness="1,0,1,1"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    Background="{DynamicResource ExpanderContentBgBrush}"
                                    CornerRadius="0,0,6,6">
                                <Border.RenderTransform>
                                    <TranslateTransform X="0" Y="0"/>
                                </Border.RenderTransform>
                                <StackPanel x:Name="ContentStackPanel">
                                    <ContentPresenter />
                                </StackPanel>
                            </Border>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded"
                   Value="True">
                            <Setter Property="CornerRadius" Value="6,6,0,0"/>
                            <!--<Setter TargetName="ContentRow"
                    Property="Height"
                    Value="{Binding Height, ElementName=Content}" />-->
                        </Trigger>
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsExpanded}" Value="True">
                            <DataTrigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetProperty="(base:Icon.RenderTransform).(RotateTransform.Angle)"
                                          Storyboard.TargetName="Icon" Duration="00:00:0.2" To="180"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </DataTrigger.EnterActions>
                            <DataTrigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetProperty="(base:Icon.RenderTransform).(RotateTransform.Angle)"
                                          Storyboard.TargetName="Icon" Duration="00:00:0.2" To="0"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </DataTrigger.ExitActions>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>